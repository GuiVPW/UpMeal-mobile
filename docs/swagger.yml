swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger UpMeal"
host: "upmeal.com"
basePath: "/api/rest"
tags:
- name: "shops"
  description: "Operations about shops and foods"
- name: "clients"
  description: "Operations about clients and reservations"
schemes:
- "https"
- "http"
paths:
  /shops:
    post:
      tags:
      - "shops"
      summary: "Sign Up as a Shop"
      operationId: "addShop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Shop object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Shop"
      responses:
        "201":
          description: "Shop Created"
          schema:
            $ref: "#/definitions/Shop"
        "405":
          description: "Invalid input"
    get:
      tags:
      - "shops"
      summary: "Find multiple shops"
      description: "Returns multiple shops"
      operationId: "getShops"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name of the shop"
        required: false
        type: "string"
      - name: "city"
        in: "query"
        description: "Name of the city to return the shops"
        required: false
        type: "string"
      - name: "state"
        in: "query"
        description: "Name of the state to return the shops"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Shop"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Shop not found"
      security:
      - access_id: []
  /shops/{shopId}:
    get:
      tags:
      - "shops"
      summary: "Find shop by ID"
      description: "Returns a single shop"
      operationId: "getShopById"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Shop"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Shop not found"
      security:
      - access_id: []
    put:
      tags:
      - "shops"
      summary: "Update an existing shops"
      operationId: "updateShop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Shop object"
        required: true
        schema:
          $ref: "#/definitions/Shop"
      responses:
        "200":
          description: "Shop Updated"
          schema:
            $ref: "#/definitions/Shop"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Shop not found"
        "405":
          description: "Validation exception"
      security:
      - basic_auth: []
  /shops/{shopId}/uploadImage:
    post:
      tags:
      - "shops"
      summary: "Uploads an image to the shop"
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - basic_auth: []
  /shops/{shopId}/foods:
    post:
      tags:
      - "shops"
      summary: "Add a food for the given shop"
      operationId: "createFood"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to create the food"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Food object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Food"
      responses:
        "201":
          description: "Food Created"
          schema:
            $ref: "#/definitions/Food"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Shop not found"
        "405":
          description: "Validation exception"
      security:
      - access_id: []
    get:
      tags:
      - "shops"
      summary: "Find multiple foods for the given shop"
      description: "Returns multiple foods"
      operationId: "getFoods"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to create the food"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Food"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Shop not found"
      security:
      - access_id: []
      - basic_auth: []
  /shops/{shopId}/foods/{foodId}:
    get:
      tags:
      - "shops"
      summary: "Find food by ID"
      description: "Returns a single food"
      operationId: "getFoodById"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "foodId"
        in: "path"
        description: "ID of food to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Shop"
        "400":
          description: "Invalid IDs supplied"
        "404":
          description: "Food or Shop not found"
      security:
      - access_id: []
    put:
      tags:
      - "shops"
      summary: "Update an existing food"
      operationId: "updateFood"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "foodId"
        in: "path"
        description: "ID of food to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Food object"
        required: true
        schema:
          $ref: "#/definitions/Food"
      responses:
        "200":
          description: "Food Updated"
          schema:
            $ref: "#/definitions/Food"
        "400":
          description: "Invalid IDs supplied"
        "404":
          description: "Food or Shop not found"
        "405":
          description: "Validation exception"
      security:
      - basic_auth: []
    delete:
      tags:
      - "shops"
      summary: "Delete an existing food"
      operationId: "deleteFood"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "shopId"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "foodId"
        in: "path"
        description: "ID of food to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "Food Deleted"
          schema:
            $ref: "#/definitions/Food"
        "400":
          description: "Invalid IDs supplied"
        "404":
          description: "Food or Shop not found"
        "405":
          description: "Validation exception"
      security:
      - basic_auth: []
  /client:
    post:
      tags:
      - "clients"
      summary: "Sign Up as a Client"
      operationId: "addClient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Client object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Client"
      responses:
        "201":
          description: "Client Created"
          schema:
            $ref: "#/definitions/Client"
        "405":
          description: "Invalid input"
      security:
      - access_id: []
  /client/{clientId}:
    get:
      tags:
      - "clients"
      summary: "Get client by id"
      operationId: "getClientById"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Client"
        "400":
          description: "Invalid clientname supplied"
        "404":
          description: "Client not found"
      security:
      - access_id: []
      - basic_auth: []
  /reservations:
    post:
      tags:
      - "reservations"
      summary: "Create a Reservation as Client"
      operationId: "addReservation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reservation object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Reservation"
      responses:
        "201":
          description: "Reservation Created"
          schema:
            $ref: "#/definitions/Reservation"
        "405":
          description: "Invalid input"
      security:
      - access_id: []
securityDefinitions:
  basic_auth:
    type: "basic"
  access_id:
    type: "apiKey"
    name: "access_id"
    in: "header"
definitions:
  Food:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      shopId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      quantity:
        type: "integer"
        format: "int32"
      isAvailable:
        type: "boolean"
      validationDate:
        type: "string"
        example: "DD/MM/YYYY - 15-11-2021"
  Client:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      phone:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      accessId:
        type: "string"
      reservations:
        type: "array"
        items:
          $ref: "#/definitions/Reservation"
  Reservation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      shopId:
        type: "integer"
        format: "int64"
      clientId:
        type: "integer"
        format: "int64"
  Shop:
    type: "object"
    required:
    - "id"
    - "name"
    - "email"
    - "city"
    - "state"
    - "latitude"
    - "longitude"
    - "phone"
    - "imageUrl"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Caverna do Dragão"
      email:
        type: "string"
        example: "cavernadodragao@gmail.com"
      city:
        type: "string"
        example: "São Paulo"
      state:
        type: "string"
        example: "São Paulo"
      latitude:
        type: "number"
        format: "float"
      longitude:
        type: "number"
        format: "float"
      phone:
        type: "string"
      imageUrl:
        type: "string"
      foods:
        type: "array"
        items:
          $ref: "#/definitions/Food"
      reservations:
        type: "array"
        items:
          $ref: "#/definitions/Reservation"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"